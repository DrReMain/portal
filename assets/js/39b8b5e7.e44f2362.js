"use strict";(self.webpackChunkgo_zero=self.webpackChunkgo_zero||[]).push([[3277],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return c}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),d=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=d(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=d(t),c=a,k=m["".concat(s,".").concat(c)]||m[c]||u[c]||i;return t?r.createElement(k,o(o({ref:n},p),{},{components:t})):r.createElement(k,o({ref:n},p))}));function c(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var d=2;d<i;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1563:function(e,n,t){t.r(n),t.d(n,{default:function(){return u},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return d}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),o=["components"],l={},s={unversionedId:"blog/showcase/mysql",id:"blog/showcase/mysql",isDocsHomePage:!1,title:"Mysql",description:"go-zero provides easier operation of mysql API.",source:"@site/docs/blog/showcase/mysql.md",sourceDirName:"blog/showcase",slug:"/blog/showcase/mysql",permalink:"/docs/blog/showcase/mysql",editUrl:"https://github.com/zeromicro/portal/edit/main/docs/blog/showcase/mysql.md",version:"current",lastUpdatedAt:1680612191,formattedLastUpdatedAt:"4/4/2023",frontMatter:{},sidebar:"blog",previous:{title:"Enterprise RPC framework zRPC",permalink:"/docs/blog/showcase/zrpc"},next:{title:"Mapping",permalink:"/docs/blog/showcase/mapping"}},d=[{value:"Features",id:"features",children:[]},{value:"Connection",id:"connection",children:[]},{value:"CRUD",id:"crud",children:[{value:"insert",id:"insert",children:[]},{value:"query",id:"query",children:[]},{value:"querypartial",id:"querypartial",children:[]}]},{value:"Transaction",id:"transaction",children:[]},{value:"Distributed transactions",id:"distributed-transactions",children:[]}],p={toc:d};function u(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"go-zero")," provides easier operation of ",(0,i.kt)("inlineCode",{parentName:"p"},"mysql")," API."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"But ",(0,i.kt)("inlineCode",{parentName:"p"},"stores/mysql")," positioning is not an ",(0,i.kt)("inlineCode",{parentName:"p"},"orm")," framework. If you need to generate ",(0,i.kt)("inlineCode",{parentName:"p"},"model")," layer code through ",(0,i.kt)("inlineCode",{parentName:"p"},"sql/scheme")," -> ",(0,i.kt)("inlineCode",{parentName:"p"},"model/struct")," reverse engineering, developers can use ",(0,i.kt)("a",{parentName:"p",href:"https://go-zero.dev/cn/goctl-model.html"},"goctl model"),", this is an excellent feature."))),(0,i.kt)("h2",{id:"features"},"Features"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Provides a more developer-friendly API compared to native"),(0,i.kt)("li",{parentName:"ul"},"Complete the automatic assignment of ",(0,i.kt)("inlineCode",{parentName:"li"},"queryField -> struct")),(0,i.kt)("li",{parentName:"ul"},'Insert "bulkinserter" in batches'),(0,i.kt)("li",{parentName:"ul"},"Comes with fuse"),(0,i.kt)("li",{parentName:"ul"},"API has been continuously tested by several services"),(0,i.kt)("li",{parentName:"ul"},"Provide ",(0,i.kt)("inlineCode",{parentName:"li"},"partial assignment")," feature, do not force strict assignment of ",(0,i.kt)("inlineCode",{parentName:"li"},"struct"))),(0,i.kt)("h2",{id:"connection"},"Connection"),(0,i.kt)("p",null,"Let's use an example to briefly explain how to create a ",(0,i.kt)("inlineCode",{parentName:"p"},"mysql")," connected model:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'// 1. Quickly connect to a mysql\n// datasource: mysql dsn\nheraMysql := sqlx.NewMysql(datasource)\n\n// 2. Call in the `servicecontext`, for the logic layer above the model\nmodel.NewMysqlModel(heraMysql, tablename),\n\n// 3. model layer mysql operation\nfunc NewMysqlModel(conn sqlx.SqlConn, table string) *MysqlModel {\n    defer func() {\n        recover()\n    }()\n    // 4. Create a batch insert [mysql executor]\n    // conn: mysql connection; insertsql: mysql insert sql\n    bulkInserter , err := sqlx.NewBulkInserter(conn, insertsql)\n    if err != nil {\n        logx.Error("Init bulkInsert Faild")\n        panic("Init bulkInsert Faild")\n        return nil\n    }\n    return &MysqlModel{conn: conn, table: table, Bulk: bulkInserter}\n}\n')),(0,i.kt)("h2",{id:"crud"},"CRUD"),(0,i.kt)("p",null,"Prepare an ",(0,i.kt)("inlineCode",{parentName:"p"},"User model")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'var userBuilderQueryRows = strings.Join(builder.FieldNames(&User{}), ",")\n\ntype User struct {\n    Avatar string `db:"avatar"`\n    UserName string `db:"user_name"`\n    Sex int `db:"sex"`\n    MobilePhone string `db:"mobile_phone"`\n}\n')),(0,i.kt)("p",null,"Among them, ",(0,i.kt)("inlineCode",{parentName:"p"},"userBuilderQueryRows"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"go-zero")," provides ",(0,i.kt)("inlineCode",{parentName:"p"},"struct -> [field...]")," conversion. Developers can use this as a template directly."),(0,i.kt)("h3",{id:"insert"},"insert"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'// An actual insert model layer operation\nfunc (um *UserModel) Insert(user *User) (int64, error) {\n    const insertsql = `insert into `+um.table+` (`+userBuilderQueryRows+`) values(?, ?, ?)`\n    // insert op\n    res, err := um.conn.Exec(insertsql, user.Avatar, user.UserName, user.Sex, user.MobilePhone)\n    if err != nil {\n        logx.Errorf("insert User Position Model Model err, err=%v", err)\n        return -1, err\n    }\n    id, err := res.LastInsertId()\n    if err != nil {\n        logx.Errorf("insert User Model to Id  parse id err,err=%v", err)\n        return -1, err\n    }\n    return id, nil\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Splicing ",(0,i.kt)("inlineCode",{parentName:"li"},"insertsql")),(0,i.kt)("li",{parentName:"ul"},"Pass in ",(0,i.kt)("inlineCode",{parentName:"li"},"insertsql")," and the ",(0,i.kt)("inlineCode",{parentName:"li"},"struct field")," corresponding to the placeholder -> ",(0,i.kt)("inlineCode",{parentName:"li"},"con.Exex(insertsql, field...)"))),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("inlineCode",{parentName:"p"},"conn.Exec(sql, args...)"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"args...")," needs to correspond to the placeholder in ",(0,i.kt)("inlineCode",{parentName:"p"},"sql"),". Otherwise, there will be problems with assignment exceptions."))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"go-zero")," unified and abstracted operations involving ",(0,i.kt)("inlineCode",{parentName:"p"},"mysql")," modification as ",(0,i.kt)("inlineCode",{parentName:"p"},"Exec()"),". So the ",(0,i.kt)("inlineCode",{parentName:"p"},"insert/update/delete")," operations are essentially the same. For the remaining two operations, the developer can try the above ",(0,i.kt)("inlineCode",{parentName:"p"},"insert")," process."),(0,i.kt)("h3",{id:"query"},"query"),(0,i.kt)("p",null,"You only need to pass in the ",(0,i.kt)("inlineCode",{parentName:"p"},"querysql")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"model")," structure, and you can get the assigned ",(0,i.kt)("inlineCode",{parentName:"p"},"model"),". No need for developers to manually assign values."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'func (um *UserModel) FindOne(uid int64) (*User, error) {\n    var user User\n    const querysql = `select `+userBuilderQueryRows+` from `+um.table+` where id=? limit 1`\n    err := um.conn.QueryRow(&user, querysql, uid)\n    if err != nil {\n        logx.Errorf("userId.findOne error, id=%d, err=%s", uid, err.Error())\n        if err == sqlx.ErrNotFound {\n            return nil, ErrNotFound\n        }\n        return nil, err\n    }\n    return &user, nil\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Declare ",(0,i.kt)("inlineCode",{parentName:"li"},"model struct"),", splicing ",(0,i.kt)("inlineCode",{parentName:"li"},"querysql")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"conn.QueryRow(&model, querysql, args...)"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"args...")," corresponds to the placeholder in ",(0,i.kt)("inlineCode",{parentName:"li"},"querysql"),".")),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The first parameter in ",(0,i.kt)("inlineCode",{parentName:"p"},"QueryRow()")," needs to be passed in ",(0,i.kt)("inlineCode",{parentName:"p"},"Ptr"),' "The bottom layer needs to be reflected to assign a value to ',(0,i.kt)("inlineCode",{parentName:"p"},"struct"),'"'))),(0,i.kt)("p",null,"The above is to query one record, if you need to query multiple records, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"conn.QueryRows()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'func (um *UserModel) FindOne(sex int) ([]*User, error) {\n    users := make([]*User, 0)\n    const querysql = `select `+userBuilderQueryRows+` from `+um.table+` where sex=?`\n    err := um.conn.QueryRows(&users, querysql, sex)\n    if err != nil {\n        logx.Errorf("usersSex.findOne error, sex=%d, err=%s", uid, err.Error())\n        if err == sqlx.ErrNotFound {\n            return nil, ErrNotFound\n        }\n        return nil, err\n    }\n    return users, nil\n}\n')),(0,i.kt)("p",null,"The difference from ",(0,i.kt)("inlineCode",{parentName:"p"},"QueryRow()")," is: ",(0,i.kt)("inlineCode",{parentName:"p"},"model")," needs to be set to ",(0,i.kt)("inlineCode",{parentName:"p"},"Slice"),", because it is to query multiple rows, and multiple ",(0,i.kt)("inlineCode",{parentName:"p"},"model"),"s need to be assigned. But at the same time you need to pay attention to \ufe0f: the first parameter needs to be passed in ",(0,i.kt)("inlineCode",{parentName:"p"},"Ptr")),(0,i.kt)("h3",{id:"querypartial"},"querypartial"),(0,i.kt)("p",null,"In terms of use, it is no different from the above-mentioned ",(0,i.kt)("inlineCode",{parentName:"p"},"QueryRow()"),', "this reflects the highly abstract design of ',(0,i.kt)("inlineCode",{parentName:"p"},"go-zero"),'."'),(0,i.kt)("p",null,"the difference:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"QueryRow()"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"len(querysql fields) == len(struct)"),", and one-to-one correspondence"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"QueryRowPartial()"),"\xa0\uff1a",(0,i.kt)("inlineCode",{parentName:"li"},"len(querysql fields) <= len(struct)"))),(0,i.kt)("p",null,"numA: Number of database fields; numB: the number of defined ",(0,i.kt)("inlineCode",{parentName:"p"},"struct")," attributes.\nIf ",(0,i.kt)("inlineCode",{parentName:"p"},"numA <numB"),', but you just need to unify multiple queries, "multiple ',(0,i.kt)("inlineCode",{parentName:"p"},"struct")," is defined to return different purposes, and all of them can use the same ",(0,i.kt)("inlineCode",{parentName:"p"},"querysql"),'", you can use ',(0,i.kt)("inlineCode",{parentName:"p"},"QueryRowPartial() ")),(0,i.kt)("h2",{id:"transaction"},"Transaction"),(0,i.kt)("p",null,"To perform a series of operations in a transaction, the general process is as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'var insertsql = `insert into User(uid, username, mobilephone) values (?, ?, ?)`\nerr := usermodel.conn.Transact(func(session sqlx.Session) error {\n    stmt, err := session.Prepare(insertsql)\n    if err != nil {\n        return err\n    }\n    defer stmt.Close()\n\n    // Any error returned will roll back the transaction\n    if _, err := stmt.Exec(uid, username, mobilephone); err != nil {\n        logx.Errorf("insert userinfo stmt exec: %s", err)\n        return err\n    }\n\n    // You can also continue to perform insert/update/delete related operations\n    return nil\n})\n')),(0,i.kt)("p",null,"As in the above example, developers only need to wrap all operations in ",(0,i.kt)("strong",{parentName:"p"},"transaction")," in a function ",(0,i.kt)("inlineCode",{parentName:"p"},"func(session sqlx.Session) error {}"),", if the operation in the transaction returns any error, ",(0,i.kt)("inlineCode",{parentName:"p"},"Transact( )")," will automatically roll back the transaction."),(0,i.kt)("h2",{id:"distributed-transactions"},"Distributed transactions"),(0,i.kt)("p",null,"go-zero has deeply cooperated with ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/dtm-labs/dtm"},"dtm")," and has natively supported distributed transactions, see ",(0,i.kt)("a",{parentName:"p",href:"../../eco/distributed-transaction"},"distributed-transaction")," for details"))}u.isMDXComponent=!0}}]);