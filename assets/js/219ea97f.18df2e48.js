"use strict";(self.webpackChunkgo_zero=self.webpackChunkgo_zero||[]).push([[5436],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return p}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},l=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),f=u(t),p=o,g=f["".concat(s,".").concat(p)]||f[p]||d[p]||i;return t?r.createElement(g,c(c({ref:n},l),{},{components:t})):r.createElement(g,c({ref:n},l))}));function p(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,c=new Array(i);c[0]=f;var a={};for(var s in n)hasOwnProperty.call(n,s)&&(a[s]=n[s]);a.originalType=e,a.mdxType="string"==typeof e?e:o,c[1]=a;for(var u=2;u<i;u++)c[u]=t[u];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},5676:function(e,n,t){t.r(n),t.d(n,{default:function(){return d},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return u}});var r=t(7462),o=t(3366),i=(t(7294),t(3905)),c=["components"],a={},s={unversionedId:"configuration/rpc",id:"configuration/rpc",isDocsHomePage:!1,title:"RPC Configuration",description:"The rpc configuration controls various functions of an rpc service, including but not limited to listening address, etcd configuration, timeout, fuse configuration, etc. Below we will use a common rpc service configuration to illustrate.",source:"@site/docs/configuration/rpc.md",sourceDirName:"configuration",slug:"/configuration/rpc",permalink:"/docs/configuration/rpc",editUrl:"https://github.com/zeromicro/portal/edit/main/docs/configuration/rpc.md",version:"current",lastUpdatedAt:1677852862,formattedLastUpdatedAt:"3/3/2023",frontMatter:{},sidebar:"docs",previous:{title:"API Configuration",permalink:"/docs/configuration/api"},next:{title:"Quick Start",permalink:"/docs/quick-start/quick-start"}},u=[{value:"Configuration instructions",id:"configuration-instructions",children:[{value:"zrpc.RpcServerConf",id:"zrpcrpcserverconf",children:[]},{value:"discov.EtcdConf",id:"discovetcdconf",children:[]},{value:"redis.RedisKeyConf",id:"redisrediskeyconf",children:[]}]}],l={toc:u};function d(e){var n=e.components,t=(0,o.Z)(e,c);return(0,i.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The rpc configuration controls various functions of an rpc service, including but not limited to listening address, etcd configuration, timeout, fuse configuration, etc. Below we will use a common rpc service configuration to illustrate."),(0,i.kt)("h2",{id:"configuration-instructions"},"Configuration instructions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"Config struct {\n    zrpc.RpcServerConf\n    CacheRedis         cache.CacheConf // Redis cache configuration, see the api configuration instructions for details, and I won\u2019t go into details here\n    Mysql struct { // mysql database access configuration, see api configuration instructions for details, not repeat here\n        DataSource string\n    }\n}\n")),(0,i.kt)("h3",{id:"zrpcrpcserverconf"},"zrpc.RpcServerConf"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'RpcServerConf struct {\n    service.ServiceConf // mysql database access configuration, see api configuration instructions for details, not repeat here\n    ListenOn      string // rpc listening address and port, such as: 127.0.0.1:8888\n    Etcd          discov.EtcdConf    `json:",optional"` // etcd related configuration\n    Auth          bool               `json:",optional"` // Whether to enable Auth, if yes, Redis is required\n    Redis         redis.RedisKeyConf `json:",optional"` // Auth verification\n    StrictControl bool               `json:",optional"` // Whether it is Strict mode, if it is, the error is Auth failure, otherwise it can be considered as successful\n    // pending forever is not allowed\n    // never set it to 0, if zero, the underlying will set to 2s automatically\n    Timeout      int64 `json:",default=2000"` // Timeout control, unit: milliseconds\n    CpuThreshold int64 `json:",default=900,range=[0:1000]"` // CPU load reduction threshold, the default is 900, the allowable setting range is 0 to 1000\n}\n')),(0,i.kt)("h3",{id:"discovetcdconf"},"discov.EtcdConf"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"type EtcdConf struct {\n    Hosts []string // etcd host array\n    Key   string // rpc registration key\n}\n")),(0,i.kt)("h3",{id:"redisrediskeyconf"},"redis.RedisKeyConf"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'RedisConf struct {\n    Host string // redis host\n    Type string `json:",default=node,options=node|cluster"` // redis type\n    Pass string `json:",optional"` // redis password\n}\n\nRedisKeyConf struct {\n    RedisConf\n    Key string `json:",optional"` // Verification key\n}\n')))}d.isMDXComponent=!0}}]);