"use strict";(self.webpackChunkgo_zero=self.webpackChunkgo_zero||[]).push([[2707],{3905:function(e,n,o){o.d(n,{Zo:function(){return u},kt:function(){return m}});var t=o(7294);function r(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function c(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function a(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?c(Object(o),!0).forEach((function(n){r(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):c(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function i(e,n){if(null==e)return{};var o,t,r=function(e,n){if(null==e)return{};var o,t,r={},c=Object.keys(e);for(t=0;t<c.length;t++)o=c[t],n.indexOf(o)>=0||(r[o]=e[o]);return r}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(t=0;t<c.length;t++)o=c[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var s=t.createContext({}),l=function(e){var n=t.useContext(s),o=n;return e&&(o="function"==typeof e?e(n):a(a({},n),e)),o},u=function(e){var n=l(e.components);return t.createElement(s.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var o=e.components,r=e.mdxType,c=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=l(o),m=r,d=p["".concat(s,".").concat(m)]||p[m]||g[m]||c;return o?t.createElement(d,a(a({ref:n},u),{},{components:o})):t.createElement(d,a({ref:n},u))}));function m(e,n){var o=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var c=o.length,a=new Array(c);a[0]=p;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,a[1]=i;for(var l=2;l<c;l++)a[l]=o[l];return t.createElement.apply(null,a)}return t.createElement.apply(null,o)}p.displayName="MDXCreateElement"},5309:function(e,n,o){o.r(n),o.d(n,{default:function(){return g},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return l}});var t=o(7462),r=o(3366),c=(o(7294),o(3905)),a=["components"],i={},s={unversionedId:"blog/showcase/go-queue",id:"blog/showcase/go-queue",isDocsHomePage:!1,title:"Queue",description:"In the development of daily tasks, we will have many asynchronous, batch, timing, and delayed tasks to be processed. There is go-queue in go-zero. It is recommended to use go-queue for processing. Go-queue itself is also developed based on go-zero. There are two modes",source:"@site/docs/blog/showcase/go-queue.md",sourceDirName:"blog/showcase",slug:"/blog/showcase/go-queue",permalink:"/docs/blog/showcase/go-queue",editUrl:"https://github.com/zeromicro/portal/edit/main/docs/blog/showcase/go-queue.md",version:"current",lastUpdatedAt:1677852862,formattedLastUpdatedAt:"3/3/2023",frontMatter:{},sidebar:"blog",previous:{title:"Data center",permalink:"/docs/blog/showcase/datacenter"},next:{title:"Develop a travel system using go-zero go-zero-looklook",permalink:"/docs/blog/showcase/go-zero-looklook"}},l=[],u={toc:l};function g(e){var n=e.components,o=(0,r.Z)(e,a);return(0,c.kt)("wrapper",(0,t.Z)({},u,o,{components:n,mdxType:"MDXLayout"}),(0,c.kt)("p",null,"In the development of daily tasks, we will have many asynchronous, batch, timing, and delayed tasks to be processed. There is go-queue in go-zero. It is recommended to use go-queue for processing. Go-queue itself is also developed based on go-zero. There are two modes"),(0,c.kt)("ul",null,(0,c.kt)("li",{parentName:"ul"},"dq : Depends on beanstalkd, distributed, can be stored, delayed, timing settings, shutdown and restart can be re-executed, messages will not be lost, very simple to use, redis setnx is used in go-queue to ensure that each message is only consumed once, usage scenarios Mainly used for daily tasks."),(0,c.kt)("li",{parentName:"ul"},"kq: Depends on Kafka, so I won\u2019t introduce more about it, the famous Kafka, the usage scenario is mainly to do message queue")),(0,c.kt)("p",null,"We mainly talk about dq. The use of kq is also the same, but it depends on the bottom layer. If you haven't used beanstalkd, you can google it first. It's still very easy to use."),(0,c.kt)("p",null,"etc/job.yaml : Configuration file"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-yaml"},"Name: job\n\nLog:\n  ServiceName: job\n  Level: info\n\n# dq depends on Beanstalks, redis, Beanstalks configuration, redis configuration\nDqConf:\n  Beanstalks:\n    - Endpoint: 127.0.0.1:7771\n      Tube: tube1\n    - Endpoint: 127.0.0.1:7772\n      Tube: tube2\n  Redis:\n    Host: 127.0.0.1:6379\n    Type: node\n")),(0,c.kt)("p",null,"Internal/config/config.go: Parse dq corresponding ",(0,c.kt)("inlineCode",{parentName:"p"},"etc/*.yaml")," configuration"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-go"},'/**\n* @Description Configuration file\n* @Author Mikael\n* @Email 13247629622@163.com\n* @Date 2021/1/18 12:05\n* @Version 1.0\n**/\n\npackage config\n\nimport (\n    "github.com/zeromicro/go-queue/dq"\n    "github.com/zeromicro/go-zero/core/service"\n\n)\n\ntype Config struct {\n    service.ServiceConf\n    DqConf dq.DqConf\n}\n\n')),(0,c.kt)("p",null,"Handler/router.go : Responsible for multi-task registration"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-go"},'/**\n* @Description Register job\n* @Author Mikael\n* @Email 13247629622@163.com\n* @Date 2021/1/18 12:05\n* @Version 1.0\n**/\npackage handler\n\nimport (\n    "context"\n    "github.com/zeromicro/go-zero/core/service"\n    "job/internal/logic"\n    "job/internal/svc"\n)\n\nfunc RegisterJob(serverCtx *svc.ServiceContext,group *service.ServiceGroup)  {\n\n    group.Add(logic.NewProducerLogic(context.Background(),serverCtx))\n    group.Add(logic.NewConsumerLogic(context.Background(),serverCtx))\n\n    group.Start()\n\n}\n')),(0,c.kt)("p",null,"ProducerLogic: One of the job business logic"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-go"},'/**\n* @Description Producer task\n* @Author Mikael\n* @Email 13247629622@163.com\n* @Date 2021/1/18 12:05\n* @Version 1.0\n**/\npackage logic\n\nimport (\n    "context"\n    "github.com/zeromicro/go-queue/dq"\n    "github.com/zeromicro/go-zero/core/logx"\n    "github.com/zeromicro/go-zero/core/threading"\n    "job/internal/svc"\n    "strconv"\n    "time"\n)\n\n\n\ntype Producer struct {\n    ctx    context.Context\n    svcCtx *svc.ServiceContext\n    logx.Logger\n}\n\nfunc NewProducerLogic(ctx context.Context, svcCtx *svc.ServiceContext) *Producer {\n    return &Producer{\n        ctx:    ctx,\n        svcCtx: svcCtx,\n        Logger: logx.WithContext(ctx),\n    }\n}\n\nfunc (l *Producer)Start()  {\n\n    logx.Infof("start  Producer \\n")\n    threading.GoSafe(func() {\n        producer := dq.NewProducer([]dq.Beanstalk{\n            {\n                Endpoint: "localhost:7771",\n                Tube:     "tube1",\n            },\n            {\n                Endpoint: "localhost:7772",\n                Tube:     "tube2",\n            },\n        })\n        for i := 1000; i < 1005; i++ {\n            _, err := producer.Delay([]byte(strconv.Itoa(i)), time.Second * 1)\n            if err != nil {\n                logx.Error(err)\n            }\n        }\n    })\n}\n\nfunc (l *Producer)Stop()  {\n    logx.Infof("stop Producer \\n")\n}\n\n\n')),(0,c.kt)("p",null,"Another job business logic"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-go"},'/**\n* @Description Consumer task\n* @Author Mikael\n* @Email 13247629622@163.com\n* @Date 2021/1/18 12:05\n* @Version 1.0\n**/\npackage logic\n\nimport (\n    "context"\n    "github.com/zeromicro/go-zero/core/logx"\n    "github.com/zeromicro/go-zero/core/threading"\n    "job/internal/svc"\n)\n\ntype Consumer struct {\n    ctx    context.Context\n    svcCtx *svc.ServiceContext\n    logx.Logger\n}\n\nfunc NewConsumerLogic(ctx context.Context, svcCtx *svc.ServiceContext) *Consumer {\n    return &Consumer{\n        ctx:    ctx,\n        svcCtx: svcCtx,\n        Logger: logx.WithContext(ctx),\n    }\n}\n\nfunc (l *Consumer)Start()  {\n    logx.Infof("start consumer \\n")\n\n    threading.GoSafe(func() {\n        l.svcCtx.Consumer.Consume(func(body []byte) {\n            logx.Infof("consumer job  %s \\n" ,string(body))\n        })\n    })\n}\n\nfunc (l *Consumer)Stop()  {\n    logx.Infof("stop consumer \\n")\n}\n')),(0,c.kt)("p",null,"svc/servicecontext.go"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-go"},'/**\n* @Description Configuration\n* @Author Mikael\n* @Email 13247629622@163.com\n* @Date 2021/1/18 12:05\n* @Version 1.0\n**/\npackage svc\n\nimport (\n    "job/internal/config"\n    "github.com/zeromicro/go-queue/dq"\n)\n\ntype ServiceContext struct {\n    Config config.Config\n    Consumer      dq.Consumer\n}\n\nfunc NewServiceContext(c config.Config) *ServiceContext {\n    return &ServiceContext{\n        Config: c,\n        Consumer: dq.NewConsumer(c.DqConf),\n    }\n}\n\n')),(0,c.kt)("p",null,"main.go startup file"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-go"},'/**\n* @Description Startup file\n* @Author Mikael\n* @Email 13247629622@163.com\n* @Date 2021/1/18 12:05\n* @Version 1.0\n**/\npackage main\n\nimport (\n    "flag"\n    "fmt"\n    "github.com/zeromicro/go-zero/core/conf"\n    "github.com/zeromicro/go-zero/core/logx"\n    "github.com/zeromicro/go-zero/core/service"\n    "job/internal/config"\n    "job/internal/handler"\n    "job/internal/svc"\n    "os"\n    "os/signal"\n    "syscall"\n    "time"\n)\n\n\nvar configFile = flag.String("f", "etc/job.yaml", "the config file")\n\nfunc main() {\n    flag.Parse()\n\n    var c config.Config\n    conf.MustLoad(*configFile, &c)\n    ctx := svc.NewServiceContext(c)\n\n    group := service.NewServiceGroup()\n    handler.RegisterJob(ctx,group)\n\n    ch := make(chan os.Signal)\n    signal.Notify(ch, syscall.SIGHUP, syscall.SIGQUIT, syscall.SIGTERM, syscall.SIGINT)\n    for {\n        s := <-ch\n        logx.Info("get a signal %s", s.String())\n        switch s {\n        case syscall.SIGQUIT, syscall.SIGTERM, syscall.SIGINT:\n            fmt.Printf("stop group")\n            group.Stop()\n            logx.Info("job exit")\n            time.Sleep(time.Second)\n            return\n        case syscall.SIGHUP:\n        default:\n            return\n        }\n    }\n}\n')))}g.isMDXComponent=!0}}]);